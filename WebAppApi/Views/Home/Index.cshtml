@model WebApp.Models.HomeViewModel

@if (User.IsInRole("Admin"))
{
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-6">
                <div class="card text-center">
                    <div class="card-header bg-white">
                        <h5 class="card-title">@App.Resources.Home.Admin.GeneralInformation</h5>
                    </div>
                    <div class="card-body">
                        <p class="card-text">@App.Resources.Home.Admin.TotalMentors: <span id="totalMentors" class="text-primary"></span></p>
                        <p class="card-text">@App.Resources.Home.Admin.ActiveMentorships: <span id="activeMentorships" class="text-success"></span></p>
                        <p class="card-text">@App.Resources.Home.Admin.TotalFactorySupervisors: <span id="totalFactorySupervisors" class="text-danger"></span></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else if (User.IsInRole("Mentee"))
{
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-6">
                <div class="card text-center">
                    <div class="card-header bg-white">
                        <h5 class="card-title">@App.Resources.Home.Mentee.YourCurrentInternship</h5>
                    </div>
                    <div class="card-body">
                        <p class="card-text">@App.Resources.Home.Mentee.MentorshipUntil_from: <span id="mentorshipPeriod" class="text-primary"></span></p>
                        <p class="card-text">@App.Resources.Home.Mentee.MentorshipTotalHours: <span id="mentorshipHours" class="text-success"></span></p>
                        <p class="card-text">@App.Resources.Home.Mentee.IsOnSickLeave: <span id="isOnSickLeave" class="text-danger"></span></p>
                        <p class="card-text">@App.Resources.Home.Mentee.Mentor_s_: <div id="mentorList"></div></p>
                    </div>
                </div>
            </div>
            <br/>
            <h2 class="text-center mb-3">@App.Resources.Home.Mentee.YourDocuments</h2>
            <div class="card border rounded-3">
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <colgroup>
                                <col style="width: 24%;">
                                <col style="width: 23%;">
                                <col style="width: 23%;">
                                <col style="width: 30%;">
                            </colgroup>
                            <thead>
                            <tr>
                                <th>@App.Resources.Home.Mentee.DocumentStatus</th>
                                <th>@App.Resources.Home.Mentee.WayOfSigning</th>
                                <th>@App.Resources.Home.Mentee.TimeOfSigning</th>
                                <th>@App.Resources.Home.Mentee.Action</th>
                            </tr>
                            </thead>
                            <tbody id="documentTableBody">

                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else if (User.IsInRole("Mentor"))
{
    <div class="row justify-content-center column-gap-5">
        <div class="col-lg-12 mb-4">
            <h2 class="text-center mb-3">@App.Resources.Home.Mentor.YourCurrentMentees</h2>
            <div class="card border rounded-3">
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <colgroup>
                                <col style="width: 25%;">
                                <col style="width: 25%;">
                                <col style="width: 25%;">
                                <col style="width: 25%;">
                            </colgroup>
                            <thead>
                            <tr>
                                <th>@App.Resources.Home.Mentor.MenteeFullName</th>
                                <th>@App.Resources.Home.Mentor.MenteeType</th>
                                <th>@App.Resources.Home.Mentee.MentorshipUntil_from</th>
                                <th>@App.Resources.Home.Mentor.MentoForTotaHours</th>
                            </tr>
                            </thead>
                            <tbody id="mentorDataTableBody">

                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else if(!User.Identity!.IsAuthenticated)
{
    <div class="container">
            <div class="row justify-content-center">
                <div class="col-lg-6">
                    <div class="card text-center">
                        <div class="card-header bg-white">
                            <h5 class="card-title">@App.Resources.Home.UnAuth.WelcomeToOurPlatform</h5>
                        </div>
                        <div class="card-body">
                            <p class="card-text">@App.Resources.Home.UnAuth.LogInMessage</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
}

<style>
    .container {
        margin-top: 50px;
    }
    .card {
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin-bottom: 30px;
    }
    .card-title {
        font-size: 24px;
        font-weight: bold;
        color: #333;
        margin-bottom: 20px;
    }
</style>
<style>
    .container {
        margin-top: 50px;
    }
    .card {
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
    }
    .card-body {
        padding: 0;
    }
    .table th,
    .table td {
        border: none;
    }
    .table th {
        background-color: #f8f9fa;
    }
    .table tr {
        border-bottom: 1px solid #acacac;
    }
    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }
    .btn-primary:hover {
        background-color: #0056b3;
        border-color: #0056b3;
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", function() {
        fetchData()
        
        function fetchData(){
            fetch('/api/v1/Home/Index', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'}
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data.type === "Admin"){
                    document.getElementById('totalMentors').textContent = data.totalMentorsAmount;
                    document.getElementById('activeMentorships').textContent = data.activeMentorshipsAmount;    
                    document.getElementById('totalFactorySupervisors').textContent = data.factorySupervisorsAmount;
                } else if (data.type === "Mentor"){
                    populateMentorTable(data.mentorData)
                } else if (data.type === "Mentee-Intern"){
                    updateInternMenteeInfo(data)
                } else if (data.type === "Mentee-Employee"){
                    updateEmployeeMenteeInfo(data)
                }
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
            });
        }
        
        
        function populateMentorTable(data) {
            const table = document.getElementById('mentorDataTableBody');
            table.innerHTML = '';
    
            if (data && data.length > 0) {
                data.forEach(mentee => {
                    const row = `
                        <tr>
                            <td>${mentee.menteeFullName}</td>
                            <td>${mentee.menteeType}</td>
                            <td>${mentee.mentorFromDate} - ${mentee.mentorUntilDate}</td>
                            <td>${mentee.mentorTotalHours}</td>
                        </tr>
                    `;
                    table.innerHTML += row;
                });
            } else {
                table.innerHTML = '<tr><td colspan="4">No data available</td></tr>';
            }
        }
        
        function updateInternMenteeInfo(data) {
            document.querySelector('.text-primary').textContent = `${data.menteeFromDate} - ${data.menteeUntilDate}`;
            document.querySelector('.text-success').textContent = data.menteeTotalHours;
            document.querySelector('.text-danger').textContent = data.isOnSickLeave ? "Yes" : "No";

        
            const mentorList = document.querySelector('#mentorList');
            data.internsMentors.forEach(mentor => {
                const mentorInfo = document.createElement('div');
                mentorInfo.textContent = mentor;
                mentorList.appendChild(mentorInfo);
            });
        
            const documentTableBody = document.querySelector('#documentTableBody');
            data.internDocuments.forEach(doc => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${doc.documentStatus}</td>
                    <td>${doc.wayOfSigning}</td>
                    <td>${doc.choosenSigningTime}</td>
                    <td>
                        <button onclick="downloadInternDocument('${doc.id}')" class="btn btn-primary px-3 py-2 me-2">Download</button>
                        ${doc.documentStatus === 'Not signed' ? `<a href="/Document1/SigningTimesIntern?documentId=${doc.id}" class="btn btn-primary px-3 py-2 me-2">Choose Signing Option</a>` : ''}
                    </td>
                `;
                documentTableBody.appendChild(row);
            });
        }
        
        function updateEmployeeMenteeInfo(data) {
            document.querySelector('.text-primary').textContent = `${data.menteeFromDate} - ${data.menteeUntilDate}`;
            document.querySelector('.text-success').textContent = data.menteeTotalHours;
            document.querySelector('.text-danger').textContent = data.isOnSickLeave ? "Yes" : "No";

                    
            const mentorList = document.querySelector('#mentorList');
            data.employeesMentors.forEach(mentor => {
                const mentorInfo = document.createElement('div');
                mentorInfo.textContent = mentor;
                mentorList.appendChild(mentorInfo);
            });
        
            const documentTableBody = document.querySelector('#documentTableBody');
            
            data.employeeDocuments.forEach(doc => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${doc.documentStatus}</td>
                    <td>${doc.wayOfSigning}</td>
                    <td>${doc.choosenSigningTime}</td>
                    <td>
                        <button onclick="downloadEmployeeDocument('${doc.id}')" class="btn btn-primary px-3 py-2 me-2">Download</button>
                        ${doc.documentStatus === 'Not signed' ? `<a href="/Document1/SigningTimesEmployee?documentId=${doc.id}" class="btn btn-primary px-3 py-2 me-2">Choose Signing Option</a>` : ''}
                    </td>
                `;
                documentTableBody.appendChild(row);
            });
        }
        
        window.downloadEmployeeDocument = function(documentId) {
            fetch(`/api/v1.0/DocumentApi/DownloadEmployeeDocument`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(documentId)
            })
            .then(response => response.blob())
            .then(blob => {
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.style.display = 'none';
                a.href = url;
                a.download = documentId + ".pdf";
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
            })
            .catch(error => {
                console.error("Error downloading file:", error);
                alert("Failed to download file: " + error.message);
            });
        }
        
        window.downloadInternDocument = function(documentId) {
            fetch(`/api/v1.0/DocumentApi/DownloadInternDocument`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(documentId)
            })
            .then(response => response.blob())
            .then(blob => {
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.style.display = 'none';
                a.href = url;
                a.download = documentId + ".pdf";
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
            })
            .catch(error => {
                console.error("Error downloading file:", error);
                alert("Failed to download file: " + error.message);
            });
        }
            
        
    });
</script>