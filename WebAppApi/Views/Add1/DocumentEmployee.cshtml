@using Microsoft.AspNetCore.Mvc.TagHelpers
@model WebApp.Models.MenteeViewModel

<div class="container mt-3">
    <div class="row justify-content-center">
        <div class="col-md-6 mb-3">
            <h1 class="text-center mb-3">@App.Resources.Add.DocumentGenerate.GenerateDocument</h1>
            <div class="card">
                <div class="card-body">
                    <section>
                        <form method="post" id="generateDocumentForm">
                            <div class="form-group">
                                <input type="hidden" id="menteeId" name="menteeId"/>
                            </div>
                            <div class="form-group">
                                <label>@App.Resources.Add.DocumentGenerate.DocumentSamples:</label>
                                <br/>
                                <ul class="list-inline" id="documentSamplesList">

                                </ul>
                            </div>
                            <div class="form-group">
                                <label for="selectedMentorSelect">@App.Resources.Add.DocumentGenerate.RelatedMentor:</label>
                                <select name="selectedMentorId" id="selectedMentorSelect" class="form-select">
                                    <option value="" disabled selected>@App.Resources.Add.DocumentGenerate.SelectMentor</option>

                                </select>
                            </div>
                            <div class="form-group">
                                <br/>
                                <label for="signingTimes">@App.Resources.Add.DocumentGenerate.SigningTimes:</label>
                                <br/>
                                <div id="signingTimesContainer">
                                    @if (Model.SigningTimes != null)
                                    {
                                        @for (int i = 0; i < Model.SigningTimes.Count; i++)
                                        {
                                            <div class="mb-2">
                                                @Model.SigningTimes[i]
                                                <button class="btn btn-sm btn-danger deleteSigningTime">@App.Resources.Add.DocumentGenerate.Delete</button>
                                                <input type="hidden" name="signingTimes[@i]" value="@Model.SigningTimes[i]" />
                                            </div>
                                        }
                                    }
                                </div>
                                <div class="input-group mb-3">
                                    <input type="text" class="form-control" placeholder="Enter time like 14.00, 12th May" id="newSigningTime">
                                    <button class="btn btn-outline-secondary" type="button" id="addSigningTimeBtn">@App.Resources.Add.DocumentGenerate.AddTime</button>
                                </div>
                            </div>
                            <div class="text-center">
                                <button type="submit" class="btn btn-primary">@App.Resources.Add.DocumentGenerate.GenerateDocument</button>
                            </div>
                        </form>
                    </section>
                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts
{
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            const menteeId = "@Model.MenteeId";
            document.getElementById('menteeId').value = menteeId;
        
            fetch(`/api/v1.0/AddApi/GetEmployeeInfo`, {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({ menteeId: menteeId, selectedSamples: null, selectedMentorId: "", signingTimes: null })
            })
            .then(response => response.json())
            .then(data => {
                populateDocumentSamples(data.documentSamples);
                populateMentors(data.mentors);
            })
            .catch(error => console.error('Failed to fetch data:', error));
        
            function populateDocumentSamples(samples) {
                const list = document.getElementById('documentSamplesList');
                list.innerHTML = '';
                Object.keys(samples).forEach(key => {
                    const li = document.createElement('li');
                    const input = document.createElement('input');
                    input.type = 'checkbox';
                    input.id = 'sample_' + key;
                    input.name = 'selectedSamples';
                    input.value = key;
        
                    const label = document.createElement('label');
                    label.htmlFor = 'sample_' + key;
                    label.textContent = samples[key];
        
                    li.appendChild(input);
                    li.appendChild(label);
                    list.appendChild(li);
                });
            }
        
            function populateMentors(mentors) {
                const select = document.getElementById('selectedMentorSelect');
                mentors.forEach(mentor => {
                    const option = document.createElement('option');
                    option.value = mentor.id;
                    option.textContent = `${mentor.firstName} ${mentor.lastName}`;
                    select.appendChild(option);
                });
            }
        });

    
        $(document).ready(function () {
            function addSigningTimeToList(time) {
                var $timeItem = $('<div class="mb-2">' + time + ' <button class="btn btn-sm btn-danger deleteSigningTime">@App.Resources.Add.DocumentGenerate.Delete</button></div>');
                $('#signingTimesContainer').append($timeItem);
                var signingTimesInput = $('<input type="hidden" name="signingTimes" value="' + time + '">');
                $('#generateDocumentForm').append(signingTimesInput);
            }
    
            $('#addSigningTimeBtn').click(function () {
                var newTime = $('#newSigningTime').val().trim();
                if (newTime !== '') {
                    addSigningTimeToList(newTime);
                    $('#newSigningTime').val('');
                }
            });
    
            $('#signingTimesContainer').on('click', '.deleteSigningTime', function () {
                $(this).parent().remove();
                $(this).siblings('input').remove();
            });
        });
        
        document.getElementById('generateDocumentForm').addEventListener('submit', function(event) {
            event.preventDefault();
        
            const menteeId = "@Model.MenteeId"
            const selectedMentorId = document.getElementById('selectedMentorSelect').value;
            const selectedSamples = Array.from(document.querySelectorAll('input[name="selectedSamples"]:checked'))
                                          .map(sample => sample.value);
            const signingTimes = Array.from(document.querySelectorAll('input[name="signingTimes"]'))
                                      .map(input => input.value);
        
            const requestData = {
                MenteeId: menteeId,
                selectedSamples: selectedSamples,
                selectedMentorId: selectedMentorId,
                signingTimes: signingTimes
            };
        
            fetch('/api/v1.0/AddApi/GenerateDocumentEmployee', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(requestData)
            })
            .then(response => {
                if (!response.ok) throw new Error('Failed to generate documents');
                return response.blob();
            })
            .then(blob => {
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = "generated_documents.zip";
                document.body.appendChild(a);
                a.click();
                a.remove();
                window.URL.revokeObjectURL(url);
            })
            .catch(error => console.error('Error in generating documents:', error));
        });
    </script>
}

<style>
    .container {
        margin-top: 50px;
    }
    .card {
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
    }
    .card-body {
        padding: 2rem;
    }
    .form-group {
        margin-bottom: 1rem;
    }
    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }
    .btn-primary:hover {
        background-color: #0056b3;
        border-color: #0056b3;
    }
</style>
